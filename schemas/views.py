from django.http.response import JsonResponse
from django.views.generic import View
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import login_required
from django.contrib.auth import authenticate, login, logout
from django.http import HttpResponseRedirect
from django.shortcuts import render, redirect
from django.urls import reverse
from django.db import IntegrityError

from .models import Schema, SchemaTypes, DataTypes
from .forms import SchemaForm, SchemaTypesForm
from .utils import call_task


def index(request):
    
    schemas = Schema.objects.filter(user=request.user.id)

    context = {
        'schemas': schemas
    }
    return render(request, "schemas/index.html", context=context)


class SchemaCreate(View):

    @method_decorator(login_required(login_url='login'))
    def get(self, request):
        
        """render empty forms """

        schema_form = SchemaForm()
        type_form = SchemaTypesForm()
        
        context = {
            'schema_form': schema_form, 
            'type_form': type_form 
        }
        return render(request, "schemas/schema.html", context=context)
    
    @method_decorator(login_required(login_url='login'))
    def post(self, request):

        """create new Schema object"""

        bound_schema_form = SchemaForm(request.POST)

        if bound_schema_form.is_valid():          
          
            new_schema = Schema(
                user = request.user,
                name = bound_schema_form.cleaned_data['name'],
                colomn_separator = bound_schema_form.cleaned_data['colomn_separator'],
                string_character = bound_schema_form.cleaned_data['string_character']
            )    

            try:
                new_schema.save()

            except IntegrityError as ex:
                # exception message
                error_message = ex
                # return to form page (schema.html)                              
                context = {
                    'message': error_message,
                    'schema_form': bound_schema_form, 
                    'type_form': SchemaTypesForm() 
                }
                return render(request, "schemas/schema.html", context=context)

        """create colomn(s) (SchemaTypes objects) for new schema object"""
   
        # get list of "POST" dictionary keys starting with 'colomn_name'
        cols = [item for item in request.POST if item.startswith('colomn_name')]
        
        # get list of 'indexes' that are generated by JS addColomn function for each colomn instance 
        index_list = [int(col.split('_')[-1].strip()) for col in cols]
        
        # iterate over index list creating SchemaTypes
        for i in index_list:
            
            # get DataType object by ID
            dtype_id = request.POST.get(f'data_type_{i}')
            dtype_obj = DataTypes.objects.get(id = int(dtype_id))

            # cast range values
            rng_from = request.POST.get(f'range_from_{i}')
            range_from = int(rng_from) if rng_from else None
            rng_to = request.POST.get(f'range_to_{i}')
            range_to = int(rng_to) if rng_to else None

            # create colomn object           
            try:
                col_obj = SchemaTypes.objects.create(
                    schema = new_schema,
                    colomn_name = request.POST.get(f'colomn_name_{i}'),
                    data_type = dtype_obj,
                    range_from = range_from,
                    range_to = range_to,
                    order_num = request.POST.get(f'order_num_{i}'),                
                )

            except IntegrityError as ex:
                # exception message
                error_message = ex
                # return to form page (schema.html)                              
                context = {
                    'message': error_message,
                    'schema_form': bound_schema_form, 
                    'type_form': SchemaTypesForm() 
                }
                return render(request, "schemas/schema.html", context=context)

        return redirect('index')


class Datasets(View):
    
    @method_decorator(login_required(login_url='login'))
    def get(self, request, schema_id):
        
        try:
            schema = Schema.objects.get(id = schema_id)
        except Schema.DoesNotExist:
            return JsonResponse({"error": "Schema not found"}, status=404)
        
        schema_data = schema.data.all()

        context = {
            'schema': schema,
            'data': schema_data
        }

        return render(request, "schemas/datasets.html", context=context)
    
    @method_decorator(login_required(login_url='login'))
    def post(self, request, schema_id):
        
        rows = request.POST['rows']      

# TODO this should be the task delegated to Celery to work in backgroud
        
        status_code, date, filename, message = call_task(schema_id, rows)

        print('Call Task Response: ', status_code, date, filename, message) 
        
        return redirect('datasets', schema_id)


def login_view(request):
    if request.method == "POST":

        # Attempt to sign user in
        username = request.POST["username"]
        password = request.POST["password"]
        user = authenticate(request, username=username, password=password)

        # Check if authentication successful
        if user is not None:
            login(request, user)
            return HttpResponseRedirect(reverse("index"))
        else:
            return render(request, "schemas/login.html", {
                "message": "Invalid username and/or password."
            })
    else:
        return render(request, "schemas/login.html")


def logout_view(request):
    logout(request)
    return HttpResponseRedirect(reverse("index"))

